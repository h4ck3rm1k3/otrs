<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: scheduler.xml,v 1.1 2011/08/15 17:46:08 cr Exp $ -->

<section id="scheduler">
    <title>Scheduler</title>
    <para>
        The scheduler allows for asynchronous event handling and time-based scheduling.
    </para>
    <para>
        The purpose of this feature is to give us an extraordinary tool to execute tasks at
        any time, you already can handle Ticket event using this tool, in future you will
        be able to book a lot of tasks for the system, and these would be executed in
        the right time. Also we can take advance of the Scheduler using GI webservices.
    </para>
    <para>
        The scheduler stores its tasks for executing in one table.
    </para>
    <para>
        <title>scheduler_task_list</title>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Field</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>task_data</entry>
                        <entry>The complete info of how the task would be executed in a single line.</entry>
                    </row>
                    <row>
                        <entry>task_data_md5</entry>
                        <entry>Just another option to identify it.</entry>
                    </row>
                    <row>
                        <entry>task_type</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>due_time</entry>
                        <entry>Time when the task are going to be executed</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </para>
    <section>
        <title>Required Modules</title>
        <para>This feature requires different modules for each platform</para>
        <para>
            <itemizedlist mark="round">
                <listitem>
                    <para>Win32</para>
                    <listitem>Win32::Daemon This module is already provided on otrs4win installations</listitem>
                </listitem>
                <listitem>
                    <para>nix</para>
                    <listitem>Proc::Daemon This module is included in the prototype</listitem>
                    <listitem>Proc::PID::File This module is included in the prototype</listitem>
                    <listitem>POSIX This module is not included, must be installed (if is not already installed)</listitem>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    <section>
        <title>Structure</title>
        <para>
        <section>
            <title>otrs.Schedulerd4WinIntaller.pl</title>
            <para>
                This program installs the Win32 service on the system if no argument is passed it will install
                the OTRS Scheduler Daemon in the system if argument "remove" is passed it will uninstall (remove)
                the service from the system (also remove the registry values).
            </para>
            <para>
                <itemizedlist mark="round">
                    <para>Notes</para>
                    <listitem>
                        No CLI help has been added
                    </listitem>
                    <listitem>
                        Requires Win32::Daemon
                    </listitem>
                    <listitem>
                        Only runs on Win32
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>otrs.Schedulerd4Win.pl</title>
            <para>
                This program interacts directly with Windows "services.msc" and provides the necessary signals
                to the system for the correct Start, Stop, Pause and Resume the service. It also provides the
                Service main loop that is executed every 5 seconds as default(it could be changed in the SysConfig
                for this module on 'Scheduler::SleepTime' config-item) in order to don't stress the processor the
                rest of the time is sleeping.
            </para>
            <para>
                <itemizedlist mark="round">
                    <para>Notes</para>
                    <listitem>
                        There is no interaction with the CLI
                    </listitem>
                    <listitem>
                        No CLI help has been added
                    </listitem>
                    <listitem>
                        Requires Win32::Daemon
                    </listitem>
                    <listitem>
                        Only runs on Win32
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>otrs.Schedulerd.pl</title>
            <para>
                This program interacts with the CLI (Command Line Interface) and provides the signals to Start
                and Stop the daemon if no argument is passed it runs and demonize itself leaving the CLI free,
                if argument "stop" is passed then it sends the kill signal to the daemon to terminate it. It also
                provides the Daemon main loop that is executed every 5 seconds as default(it could be changed in
                the SysConfig for this module on 'Scheduler::SleepTime' config-item) in order to don't stress the
                processor the rest of the time is sleeping.
            </para>
            <para>
                <itemizedlist mark="round">
                    <para>Notes</para>
                    <listitem>
                        No CLI help has been added
                    </listitem>
                    <listitem>
                        Requires Win32::Daemon and Proc::PID::File
                    </listitem>
                    <listitem>
                        Only runs on *nix
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Kernel/Scheduler.pm</title>
            <para>
                This program do the main daemon operations, currently only provides the "Output" function that
                writes the "Message" argument in the SchedulerOUT.log and SchedulerERR.log file located in the
                the path defined in SysConfig on 'Scheduler::LogPath' config-item.
            </para>
            <para>
                <itemizedlist mark="round">
                    <para>Notes</para>
                    <listitem>
                        Only runs on *nix or Win32
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        </para>
    </section>
    <section id="scheduler_how_use">
        <title>How to use the scheduler</title>
        <para>
            Schedules a task for asynchronous execution (either as soon as possible, or with a
            specified future execution time). Each task has a task type, and for each task type
            a corresponding task handler backend must be present.
        </para>
        <para>
            For use the scheduler it's necessary to create a new instance for this module'.
        </para>
        <para>
        <programlisting><![CDATA[
            # scheduler object
            my $SchedulerObject = Kernel::Scheduler->new( %{$Self} );
        ]]></programlisting>
        </para>
        <para>
            An example of how to use it:
        </para>
        <para>
            The task data that is required depends on the task type. Please consult the task handler
            backend specification to find out exactly which data is needed.
        </para>
        <para>Here we show an example for GenericInterface task type.</para>
        <para>
            <programlisting><![CDATA[
                my $TaskID          = $SchedulerObject->TaskRegister(
                    Type => GenericInterface,
                    Data => {               # data for task register
                        WebserviceID => $WebserviceID,
                        Invoker      => $Invoker,

                        Data => $Param{Data},
                    },
                    DueTime => $DueTimeStamp,
                );
            ]]></programlisting>
        </para>
        <informaltable>
            <tgroup cols="3">
                <thead>
                    <row>
                        <entry>Parameter</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Type</entry>
                        <entry>It's the task type, but also is the selector for the backend</entry>
                    </row>
                    <row>
                        <entry>WebserviceID</entry>
                        <entry>Just the identifier for the webservice in use</entry>
                    </row>
                    <row>
                        <entry>Invoker</entry>
                        <entry>The invoker that should be executed for this task</entry>
                    </row>
                    <row>
                        <entry>Data</entry>
                        <entry>All necessary data for the invoker</entry>
                    </row>
                    <row>
                        <entry>DueTime</entry>
                        <entry>Time when task will be execute</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </section>
</section>