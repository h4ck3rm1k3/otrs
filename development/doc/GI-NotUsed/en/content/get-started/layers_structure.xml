<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: layers_structure.xml,v 1.1 2011/08/15 17:46:08 cr Exp $ -->

<section id="layers_structure">
    <title>GI Layers</title>
    <para>
        OTRS::GI is build based on a layer model, to be flexible and easy to customize.
    </para>
    <para>
        A layer is a set files, which control how the GI is performing the different
        actions for a web service. This layers can be used with the right configuration
        for create new web services without additional code.
    </para>

    <section>
        <title>Network Transport</title>

        <para>
            This layer is responsible for the correct communication with the remote system.
            It receives (inbound) and generates (outbound) requests, and generates (inbound)
            and receives (outbound) responses for the selected network transport.
        </para>
        <para>
            Inbound communication is handled by a new web server handle for the GI.
        </para>
        <para>
            Outbound communication could be initiated during an event (triggered by
            OTRS or GI) or from the Scheduler (task or time based).
        </para>
    </section>

    <section>
        <title>Data Mapping</title>

        <para>
            This layer is responsible for translating data structures between the internal and external
            layers (and vice versa). This is needed to adapt to remote systems which may have different
            data key names and data values in their interfaces.
        </para>
        <para>
            <remark>Example:</remark>
                priority (OTRS) might be called prio in a remote system and have different names for the values.
        </para>

        <para>Simple Mapping</para>
        <para>Custom Mapping</para>
    </section>

    <section>
        <title>Operation (OTRS as a provider)</title>
        <para>
            An Operation is a single action that can be performed on a local web service. All operations have
            the same programming interface, they receive a parameter hash with one parameter holding the data payload,
            and return another hash with a success status, potential error message and return data payload.
        </para>
        <para>
            Operations are used when OTRS acts as a web service provider.
        </para>
        <para>
            Local operations are called from web requests and perform actions in the OTRS system by performing
            authentication and access control (user permissions) and using the existing backend functions to
            perform changes in OTRS.
        </para>
    </section>

    <section>
        <title>Invoker (OTRS as a requester)</title>
        <para>
            When OTRS needs to make a request on a remote web service, Invokers are used. They receive
            the data and can execute code before making the request and after receiving the result, including
            error handling.
        </para>
        <para>
            There are one generic Invoker which can be used to invoke arbitrary remote web services.
            It just start the request, not perform other changes in OTRS. Other default Invokers
            for special scenarios can be added.
        </para>
    </section>

    <section>
        <title>Controller</title>
        <para>
            Controllers are collections of similar Operations or Invokers. For example, a Ticket controller might
            contain several standard ticket operations. Custom controllers can be implemented, for example a
            "TicketExternalCompany" controller which may contain similar functions like the standard controller,
            but with a different data interface, or with custom code.
        </para>
    </section>
</section>
