<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: webservice_configuration.xml,v 1.1 2011/08/15 17:46:08 cr Exp $ -->

<section id="webservice_configuration">
    <title>Web service configuration</title>
    <para>
        The web service configuration is stored in one database table 'gi_webservice_config'. Each row represents
        one configured web service with all it's configuration data in one field, stored as a single
        line in YAML format.
    </para>
    <section>
        <title>gi_webservice_config</title>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Field</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>name</entry>
                        <entry>a name to identify the web service</entry>
                    </row>
                    <row>
                        <entry>config</entry>
                        <entry>the configuration in a YAML format</entry>
                    </row>
                    <row>
                        <entry>config_md5</entry>
                        <entry>it's used as an other identifier for the web service</entry>
                    </row>
                    <row>
                        <entry>valid_id</entry>
                        <entry>to enable or disable the web service</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </section>
    <para>
        Another table 'gi_webservice_config_history' stores the older configuration versions. So when an update is made,
        the row in 'gi_webservice_config' is updated, and the old value added as a new row in
        'gi_webservice_config_history' table.
    </para>
    <section>
        <title>gi_webservice_config_history</title>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Field</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>config_id</entry>
                        <entry>a reference to the 'gi_webservice_config' table</entry>
                    </row>
                    <row>
                        <entry>config</entry>
                        <entry>the configuration in a YAML format</entry>
                    </row>
                    <row>
                        <entry>config_md5</entry>
                        <entry>it's used as an other identifier for the webservice</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </section>
    <section>
        <title>Adding a new web service configuration</title>
        <para>
            We can add a new web service configuration using one of the available tools for this action,
            one in command line, and other one in the web interface, for both you need to have your
            complete configuration in a YAML file, with the structure and content showed below, it will
            be use as the base for execute your web service.
        </para>
        <section>
            <title>The YAML file</title>
            <para>The YAML file should contain next structure</para>
        </section>
        <para>
        <itemzedlist>
            <listitem>
                    <para>Metadata</para>
            </listitem>
            <listitem>
                    <para>Provider</para>
                <listitem>
                    <para>Metadata</para>
                </listitem>
                <listitem>
                    <para>Transport, with metadata</para>
                </listitem>
                <listitem>
                    <para>List of Operations</para>
                    <listitem>
                        <para>Metadata</para>
                    </listitem>
                    <listitem>
                        <para>Mapping inbound</para>
                    </listitem>
                    <listitem>
                        <para>Mapping outbound</para>
                    </listitem>
                </listitem>
            </listitem>

            <listitem>
                <para>Requester</para>
                <listitem>
                    <para>Metadata</para>
                </listitem>
                <listitem>
                    <para>Transport, with metadata</para>
                </listitem>
                <listitem>
                    <para>List of Invokers</para>
                    <listitem>
                        <para>Metadata</para>
                    </listitem>
                    <listitem>
                        <para>Mapping inbound</para>
                    </listitem>
                    <listitem>
                        <para>Mapping outbound</para>
                    </listitem>
                    <listitem>
                        <para>Events</para>
                    </listitem>
                </listitem>
            </listitem>
        </itemzedlist>
</para>
        <section>
        <title>YAML file example</title>
        <para>
            As we explained before, webservice configuration need to be in a YAML file,
            next we show an example as how this file should look like.
        </para>
        <para>
            <screen>
---
Debugger:
  DebugThreshold: debug
  TestMode: 0
Description: Webservice for ComPany.
Name: OTRS-ComPany
Requester:
  Invoker:
    RequestGuid:
      MappingInbound:
        Config:
          KeyMapDefault:
            MapType: Keep
          ValueMapDefault:
            MapType: Keep
        Type: Simple
      MappingOutbound:
        Config:
          KeyMapDefault:
            MapType: Keep
          ValueMapDefault:
            MapType: Keep
        Type: Simple
      Type: Test::TestSimple
    RequestSystemGuid:
      Type: ComPany::RequestSystemGuid
      MappingInbound:
        Config:
          KeyMapDefault:
            MapType: Keep
          ValueMapDefault:
            MapType: Keep
        Type: Simple
      MappingOutbound:
        Config:
          KeyMapDefault:
            MapType: Keep
          ValueMapDefault:
            MapType: Keep
        Type: Simple
    ReplicateIncident:
      Events:
        - Asynchronous: 0
          Event: TicketCreate
      MappingInbound:
        Config:
          KeyMapDefault:
            MapType: Keep
          ValueMapDefault:
            MapType: Keep
        Type: Simple
      MappingOutbound:
        Config:
          KeyMapDefault:
            MapType: Keep
          ValueMapDefault:
            MapType: Keep
        Type: Simple
      Type: ComPany::ReplicateIncident
    AddInfo:
      Events:
        - Asynchronous: 1
          Event: TicketTitleUpdate
        - Asynchronous: 1
          Event: TicketCustomerUpdate
        - Asynchronous: 1
          Event: TicketFreeTextUpdate
        - Asynchronous: 1
          Event: TicketStateUpdate
        - Asynchronous: 1
          Event: TicketOwnerUpdate
        - Asynchronous: 1
          Event: TicketPriorityUpdate
        - Asynchronous: 1
          Event: ArticleCreate

      MappingInbound:
        Config:
          KeyMapDefault:
            MapType: Keep
          ValueMapDefault:
            MapType: Keep
        Type: Simple
      MappingOutbound:
        Config:
          KeyMapDefault:
            MapType: Keep
          ValueMapDefault:
            MapType: Keep
        Type: Simple
      Type: ComPany::AddInfo
  Transport:
    Config:
      Encoding: UTF-8
      Endpoint: http://someaddress/WEB_SERVICE
      NameSpace: urn:etc
      Authentication:
        Type: BasicAuth
        User: otrs
        Password: hot
    Type: HTTP::SOAP
            </screen>
        </para>
        </section>
    </section>
    <section>
        <title>By command line</title>
        <para>
You can use the command line tool to perform some action for webservices such:
read,write (add or update), list and delete.
Example: Creating a new webservice configuration:
        </para>
        <para>
        <screen>
shell> bin/otrs.WebserviceConfig.pl -a write -n webservice_name -f /path/to/yaml/file
        </screen>
        </para>
        <para>
            Also you can use 'otrs.WebserviceConfig.pl' with next options:
            <para>To read a stored config       <command>-a read  -i webservice_id</command></para>
            <para>To create a new config        <command>-a write -n webservice_name -f /path/to/yaml/file</command></para>
            <para>To update a config            <command>-a write -i webservice_id -f /path/to/yaml/file</command></para>
            <para>To list available config      <command>-a list</command></para>
            <para>To delete a config            <command>-a delete  -i webservice_id</command></para>
        </para>
    </section>
    <section>
        <title>Using the Web interface</title>
            <para>TODO: Explain this topic when gui will complete.</para>
    </section>
</section>