<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <CVS>$Id: SystemMonitoring.sopm,v 1.17 2012/01/25 10:30:55 mn Exp $</CVS>
    <Name>SystemMonitoring</Name>
    <Version>0.0.0</Version>
    <Framework>3.1.x</Framework>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <Description Lang="en">Basic mail interface to System Monitoring Suites. Also provides deeper integration to Nagios (Acknowledge on lock and Checkscript).</Description>
    <Description Lang="de">Einfache Email Schnittstelle zu System Monitoring Suites. Weitergehende Integration mit Nagios (Acknowledge on lock and Checkscript).</Description>
    <Filelist>
        <File Permission="755" Location="bin/otrs.NagiosCheck.pl"/>
        <File Permission="644" Location="Kernel/Config/Files/SystemMonitoring.xml"/>
        <File Permission="644" Location="Kernel/Config/NagiosCheck.pm.example"/>
        <File Permission="644" Location="Kernel/System/PostMaster/Filter/SystemMonitoring.pm"/>
        <File Permission="644" Location="Kernel/System/Ticket/Event/NagiosAcknowledge.pm"/>
        <File Permission="644" Location="scripts/test/SystemMonitoring.t"/>
        <File Permission="644" Location="scripts/test/sample/SystemMonitoring1.box"/>
        <File Permission="644" Location="scripts/test/sample/SystemMonitoring2.box"/>
	<File Permission="644" Location="var/packagesetup/SystemMonitoring.pm"/>
    </Filelist>
    <IntroInstallPost Title="Using the SystemMonitoring Module" Lang="en">For configuration instructions please refer to the enclosed PDF documentation.</IntroInstallPost>
    <IntroInstallPost Title="Konfiguration des SystemMonitoring Moduls" Lang="de">Eine Anleitung zur Konfiguration des SystemMonitoring Moduls findet sich in der Datei doc/SystemMonitoring.txt.</IntroInstallPost>
    <CodeUpgrade Type="pre">

    # check if config option exists
    my $Config = $Self-&gt;{ConfigObject}-&gt;Get( 'PostMaster::PreFilterModule' );

    # update/rename config option
    if ($Config &amp;&amp; $Config->{'0001-SystemMonitoring'} ) {
        $Self-&gt;{SysConfigObject} = Kernel::System::Config-&gt;new( %{$Self} );
        $Self-&gt;{SysConfigObject}-&gt;ConfigItemUpdate(
            Valid =&gt; 1,
            Key   =&gt; 'PostMaster::PreFilterModule###00-SystemMonitoring',
            Value =&gt; $Config->{'0001-SystemMonitoring'},
        );
    }

    </CodeUpgrade>

<!-- Copy and paste from ITSMIncidentProblemManagement.sopm -->
    <CodeInstall Type="post"><![CDATA[

        # define function name
        my $FunctionName = 'CodeInstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    ]]></CodeInstall>
    <CodeReinstall Type="post"><![CDATA[

        # define function name
        my $FunctionName = 'CodeReinstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    ]]></CodeReinstall>
    <CodeUpgrade Type="post"><![CDATA[

        # define function name
        my $FunctionName = 'CodeUpgrade';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # The code module has just recently been copied to it's location in the file system.
        # In a persistent Perl environment an old version of the module might still be loaded,
        # as watchdogs like Apache2::Reload haven't had a chance to reload it.
        # So we need to make sure that the new version is being loaded.
        # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
        # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
        my $CodeModulePath = $CodeModule;
        $CodeModulePath =~ s/::/\//g;
        $CodeModulePath .= '.pm';
        delete $INC{$CodeModulePath};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm.",
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm.",
                );
            }
        }

    ]]></CodeUpgrade>
    <CodeUpgrade Type="post" Version="3.0.95"><![CDATA[

        # define function name
        my $FunctionName = 'CodeUpgradeFromLowerThan_3_0_93';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    ]]></CodeUpgrade>
    <CodeUninstall Type="pre"><![CDATA[

        # define function name
        my $FunctionName = 'CodeUninstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    ]]></CodeUninstall>
    <CodeUninstall Type="post"><![CDATA[

        # cleanup stats list
        {

            # load required modules
            $Self->{MainObject}->Require('Kernel::System::CSV');
            $Self->{MainObject}->Require('Kernel::System::Group');
            $Self->{MainObject}->Require('Kernel::System::User');
            $Self->{MainObject}->Require('Kernel::System::Stats');

            # create needed objects
            $Self->{CSVObject}   = Kernel::System::CSV->new( %{$Self} );
            $Self->{GroupObject} = Kernel::System::Group->new( %{$Self} );
            $Self->{UserObject}  = Kernel::System::User->new( %{$Self} );
            $Self->{StatsObject} = Kernel::System::Stats->new(
                %{$Self},
                UserID => 1,
            );

            # cleanup stats list
            $Self->{StatsObject}->StatsCleanUp();
        }

    ]]></CodeUninstall>

</otrs_package>
